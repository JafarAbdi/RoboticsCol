#!/usr/bin/env python

from copy import deepcopy
import math
import numpy
import random
from threading import Thread, Lock
import sys

import actionlib
import control_msgs.msg
import geometry_msgs.msg
import moveit_commander
import moveit_msgs.msg
import moveit_msgs.srv
import rospy
import sensor_msgs.msg
import tf
import trajectory_msgs.msg

def convert_to_message(T):
    t = geometry_msgs.msg.Pose()
    position = tf.transformations.translation_from_matrix(T)
    orientation = tf.transformations.quaternion_from_matrix(T)
    t.position.x = position[0]
    t.position.y = position[1]
    t.position.z = position[2]
    t.orientation.x = orientation[0]
    t.orientation.y = orientation[1]
    t.orientation.z = orientation[2]
    t.orientation.w = orientation[3]        
    return t

def convert_from_message(msg):
    R = tf.transformations.quaternion_matrix((msg.orientation.x,
                                              msg.orientation.y,
                                              msg.orientation.z,
                                              msg.orientation.w))
    T = tf.transformations.translation_matrix((msg.position.x, 
                                               msg.position.y, 
                                               msg.position.z))
    return numpy.dot(T,R)

def convert_from_trans_message(msg):
    R = tf.transformations.quaternion_matrix((msg.rotation.x,
                                              msg.rotation.y,
                                              msg.rotation.z,
                                              msg.rotation.w))
    T = tf.transformations.translation_matrix((msg.translation.x, 
                                               msg.translation.y, 
                                               msg.translation.z))
    return numpy.dot(T,R)

class RRTNode(object):
    def __init__(self):
        self.q=numpy.zeros(7)
        self.parent = None

class MoveArm(object):

    def __init__(self):
        print "Motion Planning Initializing..."
        # Prepare the mutex for synchronization
        self.mutex = Lock()

        # Some info and conventions about the robot that we hard-code in here
        # min and max joint values are not read in Python urdf, so we must hard-code them here
        self.num_joints = 7
        self.q_min = []
        self.q_max = []
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        self.q_min.append(-3.1459);self.q_max.append(3.1459)
        # How finely to sample each joint
        self.q_sample = [0.1, 0.1, 0.2, 0.2, 0.2, 0.2, 0.4]
        self.joint_names = ["lwr_arm_0_joint",
                            "lwr_arm_1_joint",
                            "lwr_arm_2_joint",
                            "lwr_arm_3_joint",
                            "lwr_arm_4_joint",
                            "lwr_arm_5_joint",
                            "lwr_arm_6_joint"]

        # Subscribes to information about what the current joint values are.
        rospy.Subscriber("/joint_states", sensor_msgs.msg.JointState, 
                         self.joint_states_callback)

        # Subscribe to command for motion planning goal
        rospy.Subscriber("/motion_planning_goal", geometry_msgs.msg.Transform,
                         self.move_arm_cb)

        # Publish trajectory command
        self.pub_trajectory = rospy.Publisher("/joint_trajectory", trajectory_msgs.msg.JointTrajectory, 
                                              queue_size=1)        

        # Initialize variables
        self.joint_state = sensor_msgs.msg.JointState()

        # Wait for moveit IK service
        rospy.wait_for_service("compute_ik")
        self.ik_service = rospy.ServiceProxy('compute_ik',  moveit_msgs.srv.GetPositionIK)
        print "IK service ready"

        # Wait for validity check service
        rospy.wait_for_service("check_state_validity")
        self.state_valid_service = rospy.ServiceProxy('check_state_validity',  
                                                      moveit_msgs.srv.GetStateValidity)
        print "State validity service ready"

        # Initialize MoveIt
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group_name = "lwr_arm"
        self.group = moveit_commander.MoveGroupCommander(self.group_name) 
        print "MoveIt! interface ready"

        # Options
        self.subsample_trajectory = True
        print "Initialization done."

    def get_joint_val(self, joint_state, name):
        if name not in joint_state.name:
            print "ERROR: joint name not found"
            return 0
        i = joint_state.name.index(name)
        return joint_state.position[i]

    def set_joint_val(self, joint_state, q, name):
        if name not in joint_state.name:
            print "ERROR: joint name not found"
        i = joint_state.name.index(name)
        joint_state.position[i] = q

    """ Given a complete joint_state data structure, this function finds the values for 
    our arm's set of joints in a particular order and returns a list q[] containing just 
    those values.
    """
    def q_from_joint_state(self, joint_state):
        q = []
        for i in range(0,self.num_joints):
            q.append(self.get_joint_val(joint_state, self.joint_names[i]))
        return q

    """ Given a list q[] of joint values and an already populated joint_state, this 
    function assumes that the passed in values are for a our arm's set of joints in 
    a particular order and edits the joint_state data structure to set the values 
    to the ones passed in.
    """
    def joint_state_from_q(self, joint_state, q):
        for i in range(0,self.num_joints):
            self.set_joint_val(joint_state, q[i], self.joint_names[i])

    """ This function will perform IK for a given transform T of the end-effector. It 
    returns a list q[] of 7 values, which are the result positions for the 7 joints of 
    the left arm, ordered from proximal to distal. If no IK solution is found, it 
    returns an empy list.
    """
    def IK(self, T_goal):
        req = moveit_msgs.srv.GetPositionIKRequest()
        req.ik_request.group_name = self.group_name
        req.ik_request.robot_state = moveit_msgs.msg.RobotState()
        req.ik_request.robot_state.joint_state = self.joint_state
        req.ik_request.avoid_collisions = True
        req.ik_request.pose_stamped = geometry_msgs.msg.PoseStamped()
        req.ik_request.pose_stamped.header.frame_id = "world_link"
        req.ik_request.pose_stamped.header.stamp = rospy.get_rostime()
        req.ik_request.pose_stamped.pose = convert_to_message(T_goal)
        req.ik_request.timeout = rospy.Duration(3.0)
        res = self.ik_service(req)
        q = []
        if res.error_code.val == res.error_code.SUCCESS:
            q = self.q_from_joint_state(res.solution.joint_state)
        return q

    """ This function checks if a set of joint angles q[] creates a valid state, or 
    one that is free of collisions. The values in q[] are assumed to be values for 
    the joints of the left arm, ordered from proximal to distal. 
    """
    def is_state_valid(self, q):
        req = moveit_msgs.srv.GetStateValidityRequest()
        req.group_name = self.group_name
        current_joint_state = deepcopy(self.joint_state)
        current_joint_state.position = list(current_joint_state.position)
        self.joint_state_from_q(current_joint_state, q)
        req.robot_state = moveit_msgs.msg.RobotState()
        req.robot_state.joint_state = current_joint_state
        res = self.state_valid_service(req)
        return res.valid

    def is_segment_valid(self, q_start, q_end, q_sample):
        q_start = numpy.array(q_start)
        q_end = numpy.array(q_end)
        q_sample = numpy.array(q_sample)
        q_dir = q_end - q_start
        scale = 0
        for i in range(0,7): scale = max(scale, abs(q_dir[i]/q_sample[i]))
        if scale !=0: q_dir *= 1.0/scale
        samples = (q_end[0] - q_start[0]) / q_dir[0]
        q_current = q_start
        done = False
        count = 0
        while not done:
            for i in range(0,7):
                if q_dir[i] < 0 and q_current[i] < q_end[i]:
                    q_current[i] = q_end[i]
                    done = True
                if q_dir[i] > 0 and q_current[i] > q_end[i]:
                    q_current[i] = q_end[i]
                    done = True
            if not self.is_state_valid(q_current): return False
            q_current = q_current + q_dir
            count = count + 1
            if count > math.ceil(samples+1): 
                print "Count " + str(count) + " exceeds samples " + str(samples)
        if count < math.ceil(samples+1): print "Count " + str(count) + "; samples " + str(samples)
        return True

    def dist(self, q1,q2):
        dist = 0
        for i in range(0,len(q1)): dist += (q2[i]-q1[i])*(q2[i]-q1[i])
        return math.sqrt(dist)

    def get_random_q(self, q_min, q_max):
        q = numpy.zeros(7)
        for i in range(0,7):
            q[i] = self.q_min[i] + random.random()*(q_max[i] - q_min[i]) 
        return q
    
    def find_closest_node(self, nodes, q):
        if len(nodes) == 0: return
        d = self.dist(nodes[0].q, q)
        closest = nodes[0]
        for i in range(1,len(nodes)):
            dnew = self.dist(nodes[i].q, q)
            if dnew < d:
                closest = nodes[i]
                d = dnew
        return closest

    def shortcut_trajectory(self, q_list):
        i = 0
        while i<len(q_list):
            done = False
            while not done:
                j=i+2
                if j>=len(q_list):
                        done = True
                while j<len(q_list):
                    if self.is_segment_valid( q_list[i], q_list[j], 
                                             self.q_sample):
                        for k in range(i+1,j):
                            q_list.pop(k)
                        break
                    j=j+1
                    if j==len(q_list):
                        done = True
            i=i+1

    def sample_trajectory(self, q_list, max_length):
        i = 0
        while i<len(q_list)-1:
            q_start = q_list[i]
            q_end = q_list[i+1]
            q_diff = q_end - q_start
            norm = numpy.linalg.norm(q_diff)
            q_diff_normalized = q_diff / norm
            segments = int(math.ceil(norm/max_length))
            segment_norm = norm/segments
            for j in range(1,segments):
                q_new = q_start + q_diff_normalized * j * segment_norm
                q_list.insert(i+1, q_new)
                i = i+1
            i = i+1
               
    def RRT(self, q_start, q_goal, q_min, q_max):
        q_list = []
        nodes = []
        start = RRTNode()
        start.q = q_start
        nodes.append(start)
        max_count = 2000
        segment_length = 0.5
        count = 0
        while True:
            count = count + 1
            if count > max_count:
                print "RRT failed..."
                break
            q_random = self.get_random_q(q_min, q_max)
            closest_node = self.find_closest_node(nodes, q_random)
            q_dir = q_random - closest_node.q
            scale = segment_length * (1.0 / numpy.linalg.norm(q_dir))
            q_dir *= scale
            q_new = closest_node.q + q_dir
            if not self.is_segment_valid(closest_node.q, q_new, self.q_sample):
                continue
            new_node = RRTNode()
            new_node.q = q_new
            new_node.parent = closest_node
            nodes.append(new_node)
            print "RRT node inserted: " + str(len(nodes))
            if self.is_segment_valid(q_new, q_goal, self.q_sample):
                print "RRT connects to goal!"
                current_node = new_node
                break
        if count > max_count: return q_list
        q_list.append(q_goal)
        while current_node:
            q_list.insert(0,current_node.q)
            current_node = current_node.parent
        return q_list

    def motion_plan(self, q_start, q_goal, q_min, q_max):
        q_list = self.RRT(q_start, q_goal, q_min, q_max)
        print "Raw trajectory length: " + str(len(q_list))

        self.shortcut_trajectory(q_list)
        print "Shortcut trajectory length: " + str(len(q_list))

        if self.subsample_trajectory:
            self.sample_trajectory(q_list, 0.5)
            print "Sampled trajectory length: " + str(len(q_list))           

        return q_list

    def create_trajectory(self, q_list, v_list, a_list, t):
        joint_trajectory = trajectory_msgs.msg.JointTrajectory()
        for i in range(0, len(q_list)):
            point = trajectory_msgs.msg.JointTrajectoryPoint()
            point.positions = list(q_list[i])
            point.velocities = list(v_list[i])
            point.accelerations = list(a_list[i])
            point.time_from_start = rospy.Duration(t[i])
            joint_trajectory.points.append(point)
        joint_trajectory.joint_names = self.joint_names
        return joint_trajectory

    def create_trajectory(self, q_list):
        joint_trajectory = trajectory_msgs.msg.JointTrajectory()
        for i in range(0, len(q_list)):
            point = trajectory_msgs.msg.JointTrajectoryPoint()
            point.positions = list(q_list[i])
            joint_trajectory.points.append(point)
        joint_trajectory.joint_names = self.joint_names
        return joint_trajectory

    def project_plan(self, q_start, q_goal, q_min, q_max):
        q_list = self.motion_plan(q_start, q_goal, q_min, q_max)
        joint_trajectory = self.create_trajectory(q_list)
        return joint_trajectory

    def moveit_plan(self, q_start, q_goal, q_min, q_max):
        self.group.clear_pose_targets()
        self.group.set_joint_value_target(q_goal)
        plan=self.group.plan()
        joint_trajectory = plan.joint_trajectory
        for i in range(0,len(joint_trajectory.points)):
            joint_trajectory.points[i].time_from_start = \
              rospy.Duration(joint_trajectory.points[i].time_from_start)
        return joint_trajectory        

    def move_arm_cb(self, msg):
        print 'Moving the arm'
        T = convert_from_trans_message(msg)
        self.mutex.acquire()
        q_start = self.q_from_joint_state(self.joint_state)
        print "Solving IK"
        q_goal = self.IK(T)
        if len(q_goal)==0:
            print "IK failed, aborting"
            self.mutex.release()
            return
        print "IK solved, planning"
        trajectory = self.project_plan(numpy.array(q_start), q_goal, self.q_min, self.q_max)
        if not trajectory.points:
            print "Motion plan failed, aborting"
        else:
            print "Trajectory received with " + str(len(trajectory.points)) + " points"
            self.execute(trajectory)
        self.mutex.release()
        
    def joint_states_callback(self, joint_state):
        self.mutex.acquire()
        self.joint_state = joint_state
        self.mutex.release()

    def execute(self, joint_trajectory):
        self.pub_trajectory.publish(joint_trajectory)
        print 'Command sent to robot'

if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('move_arm', anonymous=True)
    ma = MoveArm()
    rospy.spin()

